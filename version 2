# Solves Sudokus by building a list of possible values for every blank (0) space
from math import sqrt


def sudoku(puzzle):
    n = len(puzzle)
    dic = {}
# Builds Dictionary with board position and value
    for i in xrange(0, n):
        for j in xrange(0, n):
            dic[str(i+1) + '-' + str(j+1)] = puzzle[i][j]
    # Builds list of each possible value for all empty (0) spaces, only considers row and column possibilities
    for y in range(0, 10):
        for entry in dic:
            if dic[entry] == 0:
                temp1 = []
                temp2 = []
                for entry1 in dic:
                    if entry1[0] == entry[0]: temp1.append(dic[entry1])
                    if entry1[-1] == entry[-1]: temp1.append(dic[entry1])
                for i in xrange(1, n+1):
                    if i not in temp1: temp2.append(i)
                dic[entry] = temp2
    # populates dictionary with invalid spaces in each square
        sqrdic = {str(i)+str(j): [] for i in xrange(1, int(sqrt(n))+1) for j in xrange(1, int(sqrt(n))+1)}
        for entry in dic:
            if len(str(dic[entry])) == 1:
                for index in xrange(1, int(n/sqrt(n)+1)):
                    if (index-1)*sqrt(n) < int(entry[0]) <= index*sqrt(n):
                        for index2 in xrange(1, int(sqrt(n))+1):
                            if (index2-1)*sqrt(n) < int(entry[-1]) <= index2*sqrt(n):
                                sqrdic[str(index) + str(index2)].append(dic[entry])
        # Removes invalid choices based on values in the square
        for entry in dic:
            if len(str(dic[entry])) > 1:  # only looking at spaces with multiple possible values
                for index in xrange(1, int(n/sqrt(n)+1)):
                    if (index-1)*sqrt(n) < int(entry[0]) <= index*sqrt(n):
                        for index2 in xrange(1, int(sqrt(n))+1):
                            if (index2-1)*sqrt(n) < int(entry[-1]) <= index2*sqrt(n):
                                for i in sqrdic[str(index)+str(index2)]:
                                    if i in dic[entry]: dic[entry].remove(i)
        # Looks for any space whose possibilities have been reduced to one and replaces the list with that value
        # All unsolved spaces are then set back to 0
        for entry in dic:
            if type(dic[entry]) is list and len(dic[entry]) == 1:
                dic[entry] = int(dic[entry][0])
            elif type(dic[entry]) is list and len(dic[entry]) > 1: dic[entry] = 0
    solution = [[dic[str(j)+"-"+str(i)] for i in xrange(1,n+1)] for j in xrange(1,n+1)]
    for line in solution: print line
    
#Sample Puzzles
puzzle1 = [[5, 3, 0, 0, 7, 0, 0, 0, 0],
          [6, 0, 0, 1, 9, 5, 0, 0, 0],
          [0, 9, 8, 0, 0, 0, 0, 6, 0],
          [8, 0, 0, 0, 6, 0, 0, 0, 3],
          [4, 0, 0, 8, 0, 3, 0, 0, 1],
          [7, 0, 0, 0, 2, 0, 0, 0, 6],
          [0, 6, 0, 0, 0, 0, 2, 8, 0],
          [0, 0, 0, 4, 1, 9, 0, 0, 5],
          [0, 0, 0, 0, 8, 0, 0, 7, 9]]
puzzle2 = [[0,0,0,6,0,5,9,4,7],
          [4,7,2,8,0,9,6,1,5],
          [0,0,9,1,0,4,8,0,0],
          [1,2,4,0,5,8,0,0,0],
          [7,3,8,2,9,6,1,5,4],
          [0,0,0,3,4,1,2,7,8],
          [0,0,7,9,0,3,5,0,0],
          [5,9,1,4,0,2,7,8,3],
          [3,8,6,5,0,7,0,0,0]]
puzzle3 = [[3,4,1,0],
           [0,2,0,0],
           [0,0,2,0],
           [0,1,4,3]]
